<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Maven项目构建生命周期</title>
      <link href="/2025/03/28/%E6%8A%80%E6%9C%AF/java/%E6%A1%86%E6%9E%B6/Maven/Maven%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2025/03/28/%E6%8A%80%E6%9C%AF/java/%E6%A1%86%E6%9E%B6/Maven/Maven%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven-项目构建生命周期（Build-Lifecycle）"><a href="#Maven-项目构建生命周期（Build-Lifecycle）" class="headerlink" title="Maven 项目构建生命周期（Build Lifecycle）"></a>Maven 项目构建生命周期（Build Lifecycle）</h2><hr><h3 id="一、什么是生命周期（Lifecycle）？"><a href="#一、什么是生命周期（Lifecycle）？" class="headerlink" title="一、什么是生命周期（Lifecycle）？"></a>一、什么是生命周期（Lifecycle）？</h3><blockquote><p>生命周期是 Maven 的核心机制之一，定义了 <strong>项目从清理到打包再到部署的全过程</strong>，是由一系列有序的构建阶段（Phase）组成的。</p></blockquote><p>简单理解就是：你运行一个 Maven 命令，比如 <code>mvn install</code>，Maven 会自动按照一个预定义的顺序，执行从编译、测试、打包到安装的所有阶段。</p><hr><h3 id="二、Maven-的三大内置生命周期"><a href="#二、Maven-的三大内置生命周期" class="headerlink" title="二、Maven 的三大内置生命周期"></a>二、Maven 的三大内置生命周期</h3><table><thead><tr><th>生命周期名称</th><th>作用说明</th></tr></thead><tbody><tr><td><strong>default</strong>（默认生命周期）</td><td>项目的编译、测试、打包、部署等</td></tr><tr><td><strong>clean</strong></td><td>清理项目（删除之前构建的产物）</td></tr><tr><td><strong>site</strong></td><td>生成项目文档、报告等</td></tr></tbody></table><hr><h3 id="三、默认生命周期（default-lifecycle）"><a href="#三、默认生命周期（default-lifecycle）" class="headerlink" title="三、默认生命周期（default lifecycle）"></a>三、默认生命周期（default lifecycle）</h3><p>Maven 的构建流程由多个“阶段”（Phase）组成，这些阶段是<strong>有顺序的</strong>，执行其中一个阶段会连带执行之前的所有阶段。</p><h4 id="主要构建阶段如下："><a href="#主要构建阶段如下：" class="headerlink" title="主要构建阶段如下："></a>主要构建阶段如下：</h4><table><thead><tr><th>阶段名（Phase）</th><th>功能说明</th></tr></thead><tbody><tr><td><strong>validate</strong></td><td>验证项目是否正确，例如目录结构、必要信息是否完整</td></tr><tr><td><strong>compile</strong></td><td>编译主源码（src&#x2F;main&#x2F;java）</td></tr><tr><td><strong>test</strong></td><td>编译并运行单元测试（src&#x2F;test&#x2F;java）</td></tr><tr><td><strong>package</strong></td><td>打包编译后的代码（如 jar&#x2F;war）</td></tr><tr><td><strong>verify</strong></td><td>运行集成测试，验证包是否有效</td></tr><tr><td><strong>install</strong></td><td>安装到本地 Maven 仓库，供本机其他项目使用</td></tr><tr><td><strong>deploy</strong></td><td>发布到远程仓库，供团队共享使用（通常结合 CI&#x2F;CD）</td></tr></tbody></table><blockquote><p>📝 示例：<code>mvn install</code> 会依次执行：<code>validate → compile → test → package → verify → install</code></p></blockquote><hr><h3 id="四、clean-生命周期"><a href="#四、clean-生命周期" class="headerlink" title="四、clean 生命周期"></a>四、clean 生命周期</h3><p>用于清理之前构建的文件，主要阶段：</p><table><thead><tr><th>阶段</th><th>说明</th></tr></thead><tbody><tr><td><strong>pre-clean</strong></td><td>清理前的准备工作（插件扩展用）</td></tr><tr><td><strong>clean</strong></td><td>删除 <code>target/</code> 目录（编译产物）</td></tr><tr><td><strong>post-clean</strong></td><td>清理后的收尾操作</td></tr></tbody></table><blockquote><p>常用命令：<code>mvn clean</code> — 清理旧文件，避免构建污染。</p></blockquote><hr><h3 id="五、site-生命周期（可选模块）"><a href="#五、site-生命周期（可选模块）" class="headerlink" title="五、site 生命周期（可选模块）"></a>五、site 生命周期（可选模块）</h3><p>用于生成项目站点文档（文档网站、测试覆盖率、依赖报告等）：</p><table><thead><tr><th>阶段</th><th>说明</th></tr></thead><tbody><tr><td><strong>pre-site</strong></td><td>准备生成站点</td></tr><tr><td><strong>site</strong></td><td>生成文档网站</td></tr><tr><td><strong>post-site</strong></td><td>站点生成后的处理</td></tr><tr><td><strong>site-deploy</strong></td><td>部署站点到服务器</td></tr></tbody></table><hr><h3 id="六、生命周期、阶段与插件三者关系"><a href="#六、生命周期、阶段与插件三者关系" class="headerlink" title="六、生命周期、阶段与插件三者关系"></a>六、生命周期、阶段与插件三者关系</h3><p>生命周期 ≠ 阶段 ≠ 插件<br>Maven 实际上只是框架，<strong>真正执行工作的都是插件</strong>。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean</span><br></pre></td></tr></table></figure><p>执行的是 <code>clean</code> 生命周期的 <code>clean</code> 阶段，具体操作由 <code>maven-clean-plugin</code> 实现。</p><p>下面是对**“六、生命周期、阶段与插件三者关系”<strong>的</strong>详细讲解**，包括概念区分、调用机制、示例分析、常见误区等</p><hr><h4 id="1️⃣-三者核心定义"><a href="#1️⃣-三者核心定义" class="headerlink" title="1️⃣ 三者核心定义"></a>1️⃣ 三者核心定义</h4><table><thead><tr><th>概念</th><th>定义</th><th>举例</th></tr></thead><tbody><tr><td><strong>生命周期</strong>（Lifecycle）</td><td>一组预定义的构建阶段，用于组织项目构建过程</td><td><code>default</code>、<code>clean</code>、<code>site</code></td></tr><tr><td><strong>阶段</strong>（Phase）</td><td>生命周期中的一个构建步骤，会被按顺序执行</td><td><code>compile</code>、<code>test</code>、<code>package</code>、<code>install</code> 等</td></tr><tr><td><strong>插件</strong>（Plugin）</td><td>执行具体构建行为的工具，是 Maven 的扩展机制</td><td><code>maven-compiler-plugin</code>、<code>maven-surefire-plugin</code> 等</td></tr></tbody></table><p>➡️ <strong>阶段是生命周期的一部分，插件是实际干活的角色。</strong></p><hr><h4 id="2️⃣-三者调用关系：你执行阶段，Maven调用插件"><a href="#2️⃣-三者调用关系：你执行阶段，Maven调用插件" class="headerlink" title="2️⃣ 三者调用关系：你执行阶段，Maven调用插件"></a>2️⃣ 三者调用关系：<strong>你执行阶段，Maven调用插件</strong></h4><p>比如执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure><ul><li>触发的是 <code>default</code> 生命周期中的 <code>package</code> 阶段</li><li>Maven 会找该阶段默认绑定的插件和目标（goal）</li><li>执行 <code>maven-jar-plugin:jar</code> 来打包生成 <code>.jar</code> 文件</li></ul><hr><h4 id="3️⃣-插件中的目标（Goal）"><a href="#3️⃣-插件中的目标（Goal）" class="headerlink" title="3️⃣ 插件中的目标（Goal）"></a>3️⃣ 插件中的目标（Goal）</h4><p>每个插件有一个或多个 <strong>目标（goal）</strong>，是插件中的具体任务单位。</p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表示：在 <code>compile</code> 阶段执行 <code>maven-compiler-plugin</code> 插件的 <code>compile</code> 目标。</p><hr><h4 id="4️⃣-阶段与插件绑定关系（默认）"><a href="#4️⃣-阶段与插件绑定关系（默认）" class="headerlink" title="4️⃣ 阶段与插件绑定关系（默认）"></a>4️⃣ 阶段与插件绑定关系（默认）</h4><table><thead><tr><th>阶段（Phase）</th><th>默认绑定插件及目标（Goal）</th></tr></thead><tbody><tr><td>compile</td><td><code>maven-compiler-plugin:compile</code></td></tr><tr><td>test</td><td><code>maven-surefire-plugin:test</code></td></tr><tr><td>package</td><td><code>maven-jar-plugin:jar</code> &#x2F; <code>maven-war-plugin:war</code></td></tr><tr><td>install</td><td><code>maven-install-plugin:install</code></td></tr><tr><td>deploy</td><td><code>maven-deploy-plugin:deploy</code></td></tr></tbody></table><p>这些绑定都是<strong>默认绑定</strong>，也可以在 POM 中自定义绑定其他插件或替换默认插件。</p><hr><h4 id="5️⃣-可视化总结关系图："><a href="#5️⃣-可视化总结关系图：" class="headerlink" title="5️⃣ 可视化总结关系图："></a>5️⃣ 可视化总结关系图：</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[生命周期 Lifecycle]</span><br><span class="line">         ↓</span><br><span class="line"> ┌──────────────┐</span><br><span class="line"> │    阶段 Phase   │ → 按顺序执行（compile → test → package）</span><br><span class="line"> └──────────────┘</span><br><span class="line">         ↓</span><br><span class="line">[插件 Plugin + 目标 Goal]  ← 真正执行具体操作</span><br></pre></td></tr></table></figure><hr><h4 id="6️⃣-常见误区澄清"><a href="#6️⃣-常见误区澄清" class="headerlink" title="6️⃣ 常见误区澄清"></a>6️⃣ 常见误区澄清</h4><table><thead><tr><th>误区</th><th>正确认知</th></tr></thead><tbody><tr><td>以为 <code>mvn compile</code> 是插件命令</td><td>❌ 不是插件，而是执行“阶段”</td></tr><tr><td>插件必须写在 POM 里才执行</td><td>❌ 有默认插件绑定，非必须</td></tr><tr><td>执行某阶段只执行该阶段</td><td>❌ 会连带执行前面所有阶段</td></tr></tbody></table><hr><h4 id="7️⃣-实践建议：查看阶段与插件绑定关系"><a href="#7️⃣-实践建议：查看阶段与插件绑定关系" class="headerlink" title="7️⃣ 实践建议：查看阶段与插件绑定关系"></a>7️⃣ 实践建议：查看阶段与插件绑定关系</h4><p>你可以通过以下命令查看完整的生命周期绑定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="built_in">help</span>:describe -Dcmd=compile</span><br></pre></td></tr></table></figure><p>或查看某个插件目标的详细信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="built_in">help</span>:describe -Dplugin=compiler -Dfull</span><br></pre></td></tr></table></figure><hr><h3 id="七、常用构建命令速查表"><a href="#七、常用构建命令速查表" class="headerlink" title="七、常用构建命令速查表"></a>七、常用构建命令速查表</h3><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td><code>mvn clean</code></td><td>清理项目</td></tr><tr><td><code>mvn compile</code></td><td>编译源代码</td></tr><tr><td><code>mvn test</code></td><td>执行单元测试</td></tr><tr><td><code>mvn package</code></td><td>打包</td></tr><tr><td><code>mvn install</code></td><td>安装到本地仓库</td></tr><tr><td><code>mvn deploy</code></td><td>发布到远程仓库</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> java </category>
          
          <category> 框架 </category>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test1</title>
      <link href="/2025/03/27/test1/"/>
      <url>/2025/03/27/test1/</url>
      
        <content type="html"><![CDATA[<p>Mybatis是一个orm框架</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2025/03/27/test/"/>
      <url>/2025/03/27/test/</url>
      
        <content type="html"><![CDATA[<p>11223<br>Springboot 是一个开箱即用的框架</p>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Snipaste + Hexo + GitHub + jsDelivr CDN 图床方案</title>
      <link href="/2025/03/27/%E6%8A%80%E6%9C%AF/%E5%B7%A5%E5%85%B7/Snipaste%20+%20Hexo%20+%20GitHub%20+%20jsDelivr%20CDN%20%E5%9B%BE%E5%BA%8A%E6%96%B9%E6%A1%88/"/>
      <url>/2025/03/27/%E6%8A%80%E6%9C%AF/%E5%B7%A5%E5%85%B7/Snipaste%20+%20Hexo%20+%20GitHub%20+%20jsDelivr%20CDN%20%E5%9B%BE%E5%BA%8A%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>完美的组合来了！你想在 <strong>macOS</strong> 上打造一个：</p><p>🚀 高效截图 → 自动上传 GitHub → 自动生成 CDN 图链 → Markdown 直接贴图</p><p>我为你设计了一套完整的 “Snipaste + Hexo + GitHub + jsDelivr CDN 图床方案”，让你<strong>截图即图床，图链即插用！</strong></p><hr><h2 id="✅-一图概览"><a href="#✅-一图概览" class="headerlink" title="✅ 一图概览"></a>✅ 一图概览</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Snipaste（截图标注）📸</span><br><span class="line">   ↓（复制到剪贴板）</span><br><span class="line">PicGo（自动上传）🚀</span><br><span class="line">   ↓（上传到 GitHub 图床）</span><br><span class="line">jsDelivr（CDN 加速）⚡</span><br><span class="line">   ↓</span><br><span class="line">Hexo Markdown 插图 ✅</span><br></pre></td></tr></table></figure><hr><h2 id="🧱-你需要的工具（全免费）"><a href="#🧱-你需要的工具（全免费）" class="headerlink" title="🧱 你需要的工具（全免费）"></a>🧱 你需要的工具（全免费）</h2><table><thead><tr><th>工具</th><th>用途</th><th>是否必须</th></tr></thead><tbody><tr><td><strong>Snipaste</strong></td><td>截图 + 标记（带贴图）</td><td>✅</td></tr><tr><td><strong>PicGo</strong></td><td>图床上传工具</td><td>✅</td></tr><tr><td><strong>GitHub</strong></td><td>图床存储（公开仓库）</td><td>✅</td></tr><tr><td><strong>jsDelivr</strong></td><td>CDN 加速 GitHub 图链</td><td>✅</td></tr><tr><td><strong>Hexo</strong></td><td>博客系统</td><td>✅</td></tr></tbody></table><hr><h2 id="🛠️-Step-by-Step-全流程配置"><a href="#🛠️-Step-by-Step-全流程配置" class="headerlink" title="🛠️ Step-by-Step 全流程配置"></a>🛠️ Step-by-Step 全流程配置</h2><hr><h3 id="📸-Step-1：安装-Snipaste-for-macOS"><a href="#📸-Step-1：安装-Snipaste-for-macOS" class="headerlink" title="📸 Step 1：安装 Snipaste for macOS"></a>📸 Step 1：安装 Snipaste for macOS</h3><ul><li>官网：<a href="https://snipaste.com/">https://snipaste.com</a></li><li>支持快捷键截图、标注、钉图</li><li>设置截图快捷键（如 <code>⌘ + Shift + A</code>）</li></ul><p>✅ <strong>截图后可自动复制到剪贴板（设置中开启）</strong></p><hr><h3 id="🚀-Step-2：安装-PicGo-配置-GitHub-图床"><a href="#🚀-Step-2：安装-PicGo-配置-GitHub-图床" class="headerlink" title="🚀 Step 2：安装 PicGo + 配置 GitHub 图床"></a>🚀 Step 2：安装 PicGo + 配置 GitHub 图床</h3><h4 id="安装-PicGo："><a href="#安装-PicGo：" class="headerlink" title="安装 PicGo："></a>安装 PicGo：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask picgo</span><br></pre></td></tr></table></figure><p>或从官网下载：<a href="https://picgo.github.io/">https://picgo.github.io/</a></p><p>最近PicGo打开后一直提示安装更新的版本，于是去<code>gitHub</code>下载了最新版本，安装后打开，弹窗提示信息：<code>**文件已损坏，您应该将它移到废纸篓。**</code></p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><h4 id="1-打开终端输入"><a href="#1-打开终端输入" class="headerlink" title="1.打开终端输入"></a>1.打开终端输入</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> xattr -d com.apple.quarantine <span class="string">&quot;/Applications/PicGo.app&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /Applications/PicGo.app 为程序安装的路径</span></span><br></pre></td></tr></table></figure><h4 id="2-根据终端提示输入登录密码，重新打开就可以了"><a href="#2-根据终端提示输入登录密码，重新打开就可以了" class="headerlink" title="2.根据终端提示输入登录密码，重新打开就可以了"></a>2.根据终端提示输入登录密码，重新打开就可以了</h4><h4 id="配置图床："><a href="#配置图床：" class="headerlink" title="配置图床："></a>配置图床：</h4><p>打开 PicGo → 图床设置 → 选择 <code>GitHub 图床</code>，填写以下信息：</p><table><thead><tr><th>项目</th><th>示例</th></tr></thead><tbody><tr><td>仓库名</td><td><code>你的用户名/hexo-img</code>（新建公开仓库）</td></tr><tr><td>分支</td><td><code>main</code></td></tr><tr><td>Token</td><td>GitHub Personal Access Token（含 repo 权限）</td></tr><tr><td>存储路径</td><td><code>img/</code>（可选）</td></tr><tr><td>自定义域名（CDN）不配CDN不用写</td><td><code>https://cdn.jsdelivr.net/gh/你的用户名/hexo-img@main</code></td></tr></tbody></table><p>👉 设置完成后，上传的每张图都会用 jsDelivr 加速图链 ✅</p><hr><h3 id="🎯-Step-3：绑定上传快捷键"><a href="#🎯-Step-3：绑定上传快捷键" class="headerlink" title="🎯 Step 3：绑定上传快捷键"></a>🎯 Step 3：绑定上传快捷键</h3><ul><li>打开 PicGo → 快捷键设置 → 设置「上传剪贴板图片」快捷键，例如：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Control + Option + P</span><br></pre></td></tr></table></figure><hr><h3 id="🧪-Step-4：测试上传"><a href="#🧪-Step-4：测试上传" class="headerlink" title="🧪 Step 4：测试上传"></a>🧪 Step 4：测试上传</h3><ol><li>用 Snipaste 截图 + 标注，完成后复制到剪贴板</li><li>按快捷键 <code>Ctrl + Opt + P</code></li><li>图片自动上传 GitHub，返回加速图链！</li></ol><p>示例输出图链：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/yourname/hexo-img@main/img/2025-03-27-hello.png</span>)</span><br></pre></td></tr></table></figure><p>粘贴到 Hexo Markdown 即可插图！</p><hr><h2 id="🧠-Tips：图片更新怎么处理？"><a href="#🧠-Tips：图片更新怎么处理？" class="headerlink" title="🧠 Tips：图片更新怎么处理？"></a>🧠 Tips：图片更新怎么处理？</h2><p>CDN 有缓存，如果你更新了图片但地址没变，可使用以下方式刷新：</p><table><thead><tr><th>方法</th><th>示例</th></tr></thead><tbody><tr><td>改文件名</td><td><code>cover-v2.png</code> 或 <code>cover-20250328.png</code></td></tr><tr><td>加参数</td><td><code>?v=2</code> → <code>cover.png?v=2</code>，可强制刷新</td></tr><tr><td>删除重传</td><td>直接从 GitHub 删除旧图，再上传新图</td></tr></tbody></table><hr><h2 id="🧰-Bonus：图床仓库推荐结构"><a href="#🧰-Bonus：图床仓库推荐结构" class="headerlink" title="🧰 Bonus：图床仓库推荐结构"></a>🧰 Bonus：图床仓库推荐结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo-img/</span><br><span class="line">├── img/</span><br><span class="line">│   ├── 2025-03/</span><br><span class="line">│   │   ├── pic-01.png</span><br><span class="line">│   │   └── cover-v2.png</span><br></pre></td></tr></table></figure><p>这样路径结构清晰，适合长期管理。</p><p>PicGo 支持动态路径！你可以设置路径自动按日期分类：</p><h4 id="🔧-PicGo-设置示例："><a href="#🔧-PicGo-设置示例：" class="headerlink" title="🔧 PicGo 设置示例："></a>🔧 PicGo 设置示例：</h4><p>打开 PicGo → 图床设置 → GitHub 图床 → 存储路径 填写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img/$&#123;year&#125;-$&#123;month&#125;/</span><br></pre></td></tr></table></figure><p>上面这个方法不靠谱，需要用到一个插件<a href="https://github.com/melon95/picgo-plugin-custom-path"><strong>picgo-plugin-custom-path</strong></a></p><p><strong>但是文件名有点长</strong></p><p><img src="https://cdn.jsdelivr.net/gh/neoisok/assets@main/images%2F2025%2F03%2F27%2F20250327234848693-f76bf6ed2a29672c38cd6101f3aaad75.png"></p><p>文件重命名开启<br><img src="https://cdn.jsdelivr.net/gh/neoisok/assets@main/images%2F2025%2F03%2F27%2F20250327234915338-5714bb2951fc86c47ab288ce853fe1fc.png" width=600></p><h2 id="📦-最终使用体验"><a href="#📦-最终使用体验" class="headerlink" title="📦 最终使用体验"></a>📦 最终使用体验</h2><table><thead><tr><th>动作</th><th>操作方式</th></tr></thead><tbody><tr><td>截图 + 标注</td><td>用 Snipaste <code>⌘ + Shift + A</code></td></tr><tr><td>上传图床</td><td><code>Ctrl + Option + P</code>（剪贴板上传）</td></tr><tr><td>粘贴图链</td><td>⌘ + V 粘贴 → Hexo 文章即可显示 ✅</td></tr><tr><td>图链走 CDN 加速</td><td>jsDelivr 提供全球 CDN，国内速度飞快</td></tr></tbody></table><hr><h2 id="✅-总结配置清单"><a href="#✅-总结配置清单" class="headerlink" title="✅ 总结配置清单"></a>✅ 总结配置清单</h2><table><thead><tr><th>工具</th><th>下载地址</th></tr></thead><tbody><tr><td>Snipaste</td><td><a href="https://snipaste.com/">https://snipaste.com</a></td></tr><tr><td>PicGo</td><td><a href="https://picgo.github.io/">https://picgo.github.io</a></td></tr><tr><td>GitHub 图床</td><td><a href="https://github.com/">https://github.com</a></td></tr><tr><td>jsDelivr CDN</td><td><a href="https://www.jsdelivr.com/">https://www.jsdelivr.com</a></td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring整合mybatis</title>
      <link href="/2025/03/27/%E6%8A%80%E6%9C%AF/java/%E6%A1%86%E6%9E%B6/SpringBoot%E6%95%B4%E5%90%88mybatis/"/>
      <url>/2025/03/27/%E6%8A%80%E6%9C%AF/java/%E6%A1%86%E6%9E%B6/SpringBoot%E6%95%B4%E5%90%88mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring整合mybatis简单配置"><a href="#Spring整合mybatis简单配置" class="headerlink" title="Spring整合mybatis简单配置"></a>Spring整合mybatis简单配置</h2><ol><li>pom引入mybatis的starter</li><li>配置数据库连接池</li><li>Springboot配置文件里配置mybatis相关参数</li><li>编写自己的dao以及mapper配置文件</li></ol><p>配置datasource，比如用druid链接池配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    #druid相关配置</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    #配置数据库连接</span><br><span class="line">    druid:</span><br><span class="line">      url: jdbc:mysql://localhost:3306/test-db?useUnicode=true&amp;allowMultiQueries=true&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">      username: root</span><br><span class="line">      password: 123456</span><br><span class="line">      initial-size: 10</span><br><span class="line">      max-active: 100</span><br><span class="line">      min-idle: 10</span><br><span class="line">      max-wait: 60000</span><br><span class="line">      pool-prepared-statements: true</span><br><span class="line">      max-pool-prepared-statement-per-connection-size: 20</span><br><span class="line">      time-between-eviction-runs-millis: 60000</span><br><span class="line">      min-evictable-idle-time-millis: 300000</span><br><span class="line">      validation-query: SELECT 1 FROM DUAL</span><br><span class="line">      test-while-idle: true</span><br><span class="line">      test-on-borrow: false</span><br><span class="line">      test-on-return: false</span><br><span class="line">      connectionInitSqls: set names utf8mb4</span><br></pre></td></tr></table></figure><p>配置mybatis参数，指定mapper文件路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper/*.xml</span><br></pre></td></tr></table></figure><p>定义dao接口，并加上@Mapper注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserInfoDao</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(UserInfoDO userInfoDO)</span></span><br><span class="line">    </span><br><span class="line">    UserInfoDO <span class="title function_">getById</span><span class="params">(<span class="type">long</span> id)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(UserInfoDO userInfoDO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="type">long</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置mapper文件，写好sql与dao接口的映射关系，其中namespace是对应的dao接口完整类名。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hj.dao.UserInfoDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.hj.DO.UserInfoDO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.hhdd.DO.UserInfoDO&quot;</span>&gt;</span></span><br><span class="line">      insert ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">        select ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.hj.DO.UserInfoDO&quot;</span>&gt;</span></span><br><span class="line">        update ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span>&gt;</span></span><br><span class="line">        delete ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>想spring容器中注册SqlSessionFactory，并根据mapper配置文件解析出dao与具体jdbc操作、resultMap与实体类的映射关系。</p><p>注册实现了CRUD的SqlSessionTemplate类</p><img src="https://cdn.jsdelivr.net/gh/neoisok/assets@main/images%2F2025%2F03%2F27%2FMyBatis%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" width="600">]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> java </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven 的基本原理与核心概念</title>
      <link href="/2025/03/27/%E6%8A%80%E6%9C%AF/java/%E6%A1%86%E6%9E%B6/Maven/%E7%90%86%E8%A7%A3Maven%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E4%B8%8E%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
      <url>/2025/03/27/%E6%8A%80%E6%9C%AF/java/%E6%A1%86%E6%9E%B6/Maven/%E7%90%86%E8%A7%A3Maven%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E4%B8%8E%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Maven-的基本原理与核心概念"><a href="#一、Maven-的基本原理与核心概念" class="headerlink" title="一、Maven 的基本原理与核心概念"></a>一、Maven 的基本原理与核心概念</h2><h3 id="1-Maven-是什么？"><a href="#1-Maven-是什么？" class="headerlink" title="1. Maven 是什么？"></a>1. Maven 是什么？</h3><blockquote><p>Maven 是一个基于 POM（Project Object Model）的项目管理与构建自动化工具，主要用于 Java 项目的依赖管理、构建流程、插件系统和生命周期管理。</p></blockquote><ul><li><strong>构建工具</strong>：可以将源码编译、打包、测试、部署。</li><li><strong>依赖管理工具</strong>：自动下载项目依赖（jar 包），并解决依赖冲突。</li><li><strong>项目标准化工具</strong>：统一项目结构与构建流程，提升团队协作效率。</li></ul><hr><h3 id="2-Maven-的三大核心功能"><a href="#2-Maven-的三大核心功能" class="headerlink" title="2. Maven 的三大核心功能"></a>2. Maven 的三大核心功能</h3><table><thead><tr><th>功能模块</th><th>说明</th></tr></thead><tbody><tr><td><strong>依赖管理</strong></td><td>自动下载、更新、版本控制 Jar 包，解决依赖传递</td></tr><tr><td><strong>生命周期管理</strong></td><td>定义项目构建的标准流程，如编译、测试、打包、部署</td></tr><tr><td><strong>插件机制</strong></td><td>插件实现所有构建行为，例如编译、测试、生成文档等</td></tr></tbody></table><hr><h3 id="3-Maven-的核心概念"><a href="#3-Maven-的核心概念" class="headerlink" title="3. Maven 的核心概念"></a>3. Maven 的核心概念</h3><h4 id="3-1-POM（Project-Object-Model）"><a href="#3-1-POM（Project-Object-Model）" class="headerlink" title="3.1 POM（Project Object Model）"></a>3.1 POM（Project Object Model）</h4><ul><li>Maven 项目的核心配置文件是 <code>pom.xml</code></li><li>使用 XML 结构描述项目依赖、插件、版本、构建方式等</li></ul><p>示例结构（简化版）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo-app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="3-2-坐标（Coordinates）"><a href="#3-2-坐标（Coordinates）" class="headerlink" title="3.2 坐标（Coordinates）"></a>3.2 坐标（Coordinates）</h4><p>Maven 使用一组坐标唯一标识一个构件（artifact）：</p><ul><li><code>groupId</code>：组织 ID（例如公司或开源组织）</li><li><code>artifactId</code>：项目名称或模块名称</li><li><code>version</code>：版本号</li><li><code>packaging</code>：打包类型（默认是 jar，也可以是 war）</li></ul><hr><h4 id="3-3-仓库（Repository）"><a href="#3-3-仓库（Repository）" class="headerlink" title="3.3 仓库（Repository）"></a>3.3 仓库（Repository）</h4><p>Maven 下载依赖的地方称为仓库，分为：</p><ul><li><strong>本地仓库</strong>：<code>~/.m2/repository</code>，首次下载后缓存</li><li><strong>中央仓库</strong>：默认公共仓库，<a href="https://repo.maven.apache.org/">https://repo.maven.apache.org</a></li><li><strong>私服仓库</strong>：企业内部搭建，如 Nexus、Artifactory</li></ul><hr><h4 id="3-4-生命周期（Lifecycle）"><a href="#3-4-生命周期（Lifecycle）" class="headerlink" title="3.4 生命周期（Lifecycle）"></a>3.4 生命周期（Lifecycle）</h4><p>Maven 构建项目遵循一定的生命周期，最常用的是默认生命周期：</p><table><thead><tr><th>阶段（Phase）</th><th>说明</th></tr></thead><tbody><tr><td><code>validate</code></td><td>验证项目结构是否完整</td></tr><tr><td><code>compile</code></td><td>编译 Java 源码</td></tr><tr><td><code>test</code></td><td>执行单元测试</td></tr><tr><td><code>package</code></td><td>打包成 jar&#x2F;war</td></tr><tr><td><code>install</code></td><td>安装到本地仓库</td></tr><tr><td><code>deploy</code></td><td>发布到远程仓库</td></tr></tbody></table><p>执行命令如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><hr><h4 id="3-5-插件（Plugin）"><a href="#3-5-插件（Plugin）" class="headerlink" title="3.5 插件（Plugin）"></a>3.5 插件（Plugin）</h4><p>插件是 Maven 的功能实现者，例如：</p><ul><li><code>maven-compiler-plugin</code>：编译 Java 源码</li><li><code>maven-surefire-plugin</code>：运行单元测试</li><li><code>maven-jar-plugin</code>：打包成 jar 文件</li></ul><hr><h4 id="3-6-依赖传递与范围（Scope）"><a href="#3-6-依赖传递与范围（Scope）" class="headerlink" title="3.6 依赖传递与范围（Scope）"></a>3.6 依赖传递与范围（Scope）</h4><p>依赖管理中常见问题：</p><ul><li>依赖传递：A 依赖 B，B 又依赖 C → A 自动引入 C</li><li>范围控制：<ul><li><code>compile</code>：默认，编译&#x2F;运行&#x2F;打包都可用</li><li><code>provided</code>：编译需要，运行时由容器提供（如 Servlet）</li><li><code>runtime</code>：运行时需要，如 JDBC 驱动</li><li><code>test</code>：只在测试阶段使用</li></ul></li></ul><hr><h3 id="4-Maven-的标准项目结构"><a href="#4-Maven-的标准项目结构" class="headerlink" title="4. Maven 的标准项目结构"></a>4. Maven 的标准项目结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">demo-app/</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src/</span><br><span class="line">    ├── main/</span><br><span class="line">    │   ├── java/        # 源码目录</span><br><span class="line">    │   └── resources/   # 配置文件目录</span><br><span class="line">    └── test/</span><br><span class="line">        └── java/        # 测试代码目录</span><br></pre></td></tr></table></figure><hr><h3 id="5-Maven-的工作流程（构建过程）"><a href="#5-Maven-的工作流程（构建过程）" class="headerlink" title="5. Maven 的工作流程（构建过程）"></a>5. Maven 的工作流程（构建过程）</h3><blockquote><p>开发者执行 Maven 命令 → 读取 pom.xml → 下载依赖 → 执行生命周期 → 生成产物</p></blockquote><p>流程图（建议制作成教学图）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[开发者执行命令]</span><br><span class="line">        ↓</span><br><span class="line"> [读取 pom.xml]</span><br><span class="line">        ↓</span><br><span class="line">[解析依赖关系树]</span><br><span class="line">        ↓</span><br><span class="line">[执行生命周期中各阶段]</span><br><span class="line">        ↓</span><br><span class="line"> [输出 jar/war 文件]</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> java </category>
          
          <category> 框架 </category>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 常用命令</title>
      <link href="/2025/03/19/%E6%8A%80%E6%9C%AF/%E8%BF%90%E7%BB%B4/%E5%AE%B9%E5%99%A8/Docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2025/03/19/%E6%8A%80%E6%9C%AF/%E8%BF%90%E7%BB%B4/%E5%AE%B9%E5%99%A8/Docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="windows下利用docker-搭建ubuntu-环境"><a href="#windows下利用docker-搭建ubuntu-环境" class="headerlink" title="windows下利用docker 搭建ubuntu 环境"></a>windows下利用docker 搭建ubuntu 环境</h2><h3 id="1、首先安装docker"><a href="#1、首先安装docker" class="headerlink" title="1、首先安装docker"></a><strong>1、首先安装docker</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker system df # 查看镜像、容器、数据卷占用空间</span><br><span class="line">docker images # 查看docker镜像 </span><br><span class="line">docker image ls # 查看镜像</span><br><span class="line">docker ps # 查看所有启动的容器</span><br><span class="line">docker ps -a # 查看所有容器</span><br><span class="line">docker rm -f id/name # 删除容器</span><br><span class="line">docker image rm ID # 删除镜像</span><br><span class="line">docker image prune # 删除虚悬镜像(dangling image)，由于新旧镜像同名，旧镜像名被取消，导致仓库名和标签均为&lt;none&gt;</span><br><span class="line"></span><br><span class="line">docker commit 26ea8c57c7bf ubuntupython3 # 从容器创建一个新的镜像，可以自己搭建一个ubuntu+python的开发环境，作为一个镜像，这样再次新建容器时可以以此为基础</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、获取镜像"><a href="#2、获取镜像" class="headerlink" title="2、获取镜像"></a><strong>2、获取镜像</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker search ubuntu # 查找ubuntu镜像</span><br><span class="line">docker pull ubuntu # 默认安装latest版本</span><br><span class="line">docker pull ubuntu:16.04 # 指定版本</span><br></pre></td></tr></table></figure><h3 id="3、以镜像为基础启动并运行一个容器-：https-docs-docker-com-engine-reference-commandline-container-start"><a href="#3、以镜像为基础启动并运行一个容器-：https-docs-docker-com-engine-reference-commandline-container-start" class="headerlink" title="3、以镜像为基础启动并运行一个容器 ：https://docs.docker.com/engine/reference/commandline/container_start/"></a><strong>3、以镜像为基础启动并运行一个容器 ：<a href="https://docs.docker.com/engine/reference/commandline/container_start/">https://docs.docker.com/engine/reference/commandline/container_start/</a></strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm ubuntu:16.04 bash # -i 交互式操作 -t 终端 --rm 容器退出后将其删除</span><br><span class="line">docker run -itd ubuntu bash # 后台运行</span><br><span class="line">docker run --name=openvino -it ubuntu:18.04 # 指定名字</span><br><span class="line">docker run -it -v E:/data:/home/data ubuntu bash # 挂在宿主机文件目录，实现文件共享</span><br><span class="line">exit # 退出容器</span><br><span class="line">docker container start -i container_name # 重新启动</span><br><span class="line">docker container stop # 终止容器</span><br><span class="line">docker exec -it id/name bash # 进入容器</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker attach 必须attach 到一个已经运行的容器, 使用<span class="built_in">exit</span>会导致容器停止</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入退出的容器</span></span><br><span class="line">docker start openvino</span><br><span class="line">docker attach openvino</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除容器及其挂载卷，不会对镜像造成影响</span></span><br><span class="line">docker rm -v container_id</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">批量删除停止的容器</span></span><br><span class="line">docker rm -v $(docker ps -a -q -f status=exited)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改容器的挂载目录:提交现有容器为新镜像，然后重新运行它</span></span><br><span class="line">docker commit 5a3422adeead newimagename</span><br><span class="line">docker run -ti -v &quot;$PWD/dir1&quot;:/dir1 -v &quot;$PWD/dir2&quot;:/dir2 newimagename /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Docker文件系统和数据卷:https://zhuanlan.zhihu.com/p/73288338</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Docker中的数据可以存储在类似于虚拟机磁盘的介质中，称为数据卷（Data Volume）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通常存储在容器中的一般文件随着容器的删除而消失，而数据卷独立于容器存在，并不会随着容器的删除而删除</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据卷除了延长数据的生命周期，还可以用于容器间的数据共享</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建数据卷</span></span><br><span class="line">docker volume create volume_name</span><br><span class="line">docker run -it -v /data3 --name=volume2 image_id/image_name # 启动容器并创建一个数据卷</span><br><span class="line">docker run -it -v volume_name:/data4 --name=volume3 image_id/image_name # 指定数据卷挂载容器目录</span><br><span class="line">docker run -it -volumes_from 容器ID --name=volume4 image_id # 挂载其他容器的数据卷</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有数据卷</span></span><br><span class="line">docker volume ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除数据卷</span></span><br><span class="line">docker volume rm 数据卷名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有无主的数据卷</span></span><br><span class="line">docker volume prune</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载宿主机目录</span></span><br><span class="line">docker run -it --name=test -v /宿主机目录:/容器目录 image_id</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将数据卷的数据同步到宿主机：可以创建一个新容器挂载数据卷容器，同时挂载一个本地目录，通过<span class="built_in">cp</span>命名将数据拷贝到本地目录</span></span><br><span class="line">docker run –rm –volumes-from=volume2 –name=“volume8” -v /data/www/fjh3:/fjh3:rw 镜像ID cp –rf /data1 /fjh3</span><br><span class="line"></span><br><span class="line">ps # 显示进程信息</span><br><span class="line">top # 实时显示进程动态，输入q或者按ctrl c 退出</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、ubuntu部分"><a href="#4、ubuntu部分" class="headerlink" title="4、ubuntu部分"></a><strong>4、ubuntu部分</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/os-release # 查看ubuntu版本</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://man.linuxde.net/apt-get apt-get命令</span></span><br><span class="line">apt-get update # 更新apt-get</span><br><span class="line">apt-get remove packagename # 保留配置文件</span><br><span class="line">apt-get purge packagename # 删除配置文件</span><br><span class="line">apt-get autoclean apt # 删除已删掉软件的备份</span><br><span class="line">apt-get clean # 删除安装软件的备份</span><br><span class="line">apt-get upgrade # 更新已安装的软件包</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装常用工具</span></span><br><span class="line">apt-get install -y vim</span><br><span class="line">apt-get install -y python3</span><br><span class="line">apt-get install -y python3-pip</span><br><span class="line">apt-get install -y git # 安装git　 git --version 查看版本</span><br><span class="line">apt-get install wget # wget 用于从指定的url下载文件</span><br><span class="line">apt-get install -y dos2unix</span><br></pre></td></tr></table></figure><h3 id="5、搭建开发环境"><a href="#5、搭建开发环境" class="headerlink" title="5、搭建开发环境"></a><strong>5、搭建开发环境</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Python环境：https://blog.csdn.net/m0_38124502/article/details/78090902</span></span><br><span class="line">pip freeze &gt;requirements.txt # 将当前项目的python环境导出</span><br><span class="line">pip install -r requirements.txt # 安装</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 源码安装主要有三个步骤：配置(configure)、编译(make)、安装(make install)</span></span></span><br><span class="line">./configure --help</span><br><span class="line">./configure --prefix=/usr/local # 指定安装目录</span><br><span class="line"></span><br><span class="line">pip3 install opencv-python</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 运维 </category>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理</title>
      <link href="/2025/03/19/%E7%AE%A1%E7%90%86/%E7%AE%A1%E7%90%86/"/>
      <url>/2025/03/19/%E7%AE%A1%E7%90%86/%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>这里写管理博客</p>]]></content>
      
      
      <categories>
          
          <category> 管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/03/18/hello-world/"/>
      <url>/2025/03/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="categorys"><a href="#categorys" class="headerlink" title="categorys"></a>categorys</h3><ul><li>技术&#x2F;架构</li><li>技术&#x2F;前端</li><li>技术&#x2F;数据库</li><li>技术&#x2F;运维</li><li>技术&#x2F;java</li><li>技术&#x2F;java&#x2F;基础</li><li>技术&#x2F;java&#x2F;框架</li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
